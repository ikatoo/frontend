name: E2E Tests

on: [push, workflow_dispatch]

jobs:
  e2e_tests:
    runs-on: ubuntu-latest

    env:
      VITE_API_URL: http://localhost:8000
      VITE_PORT: 3000
      PORT: 8000
      ADMINER_PORT: 8080
      BACKEND_PORT: 8000
      POSTGRES_HOSTNAME: postgres
      POSTGRES_PORT: 5432
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DBNAME: postgres
      PRIVATE_KEY: some_key
      REFRESH_PRIVATE_KEY: some_private_key
      CLOUDINARY_APIKEY: ${{ secrets.CLOUDINARY_APIKEY }}
      CLOUDINARY_APISECRET: ${{ secrets.CLOUDINARY_APISECRET }}
      CLOUDINARY_CLOUDNAME: mckatoo
      CLOUDINARY_FOLDER: ikatoo
      CLOUDINARY_URL: "cloudinary://${{ secrets.CLOUDINARY_APIKEY }}:${{ secrets.CLOUDINARY_APISECRET }}@mckatoo"
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      SMTP_SECURE: true
      SMTP_SERVER_ADDRESS: smtp.gmail.com
      SMTP_SERVER_PORT: 465
      SMTP_USERNAME: mckatoo@gmail.com

    steps:
      - name: Checkout Frontend Repository
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref_name}}
          path: frontend

      - name: Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          ref: dev
          repository: ikatoo/backend
          path: backend

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl postgresql-client

      - name: Backend Compose UP
        env:
          PORT: 8000
          POSTGRES_HOSTNAME: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DBNAME: postgres
          PRIVATE_KEY: some_private_key
          REFRESH_PRIVATE_KEY: some_refresh_key
          CLOUDINARY_APIKEY: ${{ secrets.CLOUDINARY_APIKEY }}
          CLOUDINARY_APISECRET: ${{ secrets.CLOUDINARY_APISECRET }}
          CLOUDINARY_CLOUDNAME: mckatoo
          CLOUDINARY_FOLDER: ikatoo
          CLOUDINARY_URL: "cloudinary://${{ secrets.CLOUDINARY_APIKEY }}:${{ secrets.CLOUDINARY_APISECRET }}@mckatoo"
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_SECURE: true
          SMTP_SERVER_ADDRESS: smtp.gmail.com
          SMTP_SERVER_PORT: 465
          SMTP_USERNAME: mckatoo@gmail.com
        working-directory: backend
        run: docker compose up -d postgres backend

      - name: Install System Dependencies
        run: sudo apt-get install -y curl postgresql-client

      - name: Create User
        working-directory: backend
        run: >-
          # curl -X POST \
          # http://localhost:8000 \
          # -H "Content-Type: application/json" \
          # -d '{"name": "Teste", "email": "teste@teste.com", "password": "teste"}'
          curl http://localhost:8000/users

      # - name: Run Backend Dev
      #   working-directory: backend
      #   env:
      #     PORT: 8000
      #     POSTGRES_HOSTNAME: localhost
      #     POSTGRES_PASSWORD: postgres
      #     POSTGRES_USER: postgres
      #     POSTGRES_DBNAME: postgres
      #     PRIVATE_KEY: $PRIVATE_KEY
      #     REFRESH_PRIVATE_KEY: $REFRESH_PRIVATE_KEY
      #     CLOUDINARY_APIKEY: $CLOUDINARY_APIKEY
      #     CLOUDINARY_APISECRET: $CLOUDINARY_APISECRET
      #     CLOUDINARY_CLOUDNAME: $CLOUDINARY_CLOUDNAME
      #     CLOUDINARY_FOLDER: $CLOUDINARY_FOLDER
      #     CLOUDINARY_URL: $CLOUDINARY_URL
      #     SMTP_PASSWORD: $SMTP_PASSWORD
      #     SMTP_SECURE: $SMTP_SECURE
      #     SMTP_SERVER_ADDRESS: $SMTP_SERVER_ADDRESS
      #     SMTP_SERVER_PORT: $SMTP_SERVER_PORT
      #     SMTP_USERNAME: $SMTP_USERNAME
      #   run: docker run -d -t -i
      #     --name backend
      #     --user node
      #     --workdir "/home/node/app"
      #     -v ./:/home/node/app
      #     -p 8000:8000
      #     node:alpine
      #     npm run start:dev

      # - name: Create Test User
      #   run: |
      #     docker inspect backend
      #     docker logs backend
      #     docker ps
      #     curl http://localhost:8000
          # docker exec -t -i backend ls
          # docker inspect backend
          # docker logs backend
          # curl http://localhost:8000
          # echo "CLOUDINARY_APISECRET ======= ${{ secrets.CLOUDINARY_APISECRET }}"
          # echo "CLOUDINARY_APIKEY ========== ${{ secrets.CLOUDINARY_APIKEY }}"
        # run: curl http://localhost:8000
        # run: >-
          # curl http://localhost:8000

      # - name: Enable Test User
      #   run: psql -v ON_ERROR_STOP=1 --host localhost --username postgres --dbname postgres -c 'update users set "enabled" = true;'

      # - name: Install Frontend Dependencies
      #   run: npm ci

      # - name: Run Vite
      #   run: docker run --name frontend
      #     -d --user=node
      #     -t -i
      #     --workdir=/home/node/app
      #     -v ./:/home/node/app
      #     -e "VITE_API_URL=http://localhost:8000"
      #     -e "VITE_PORT=3000"
      #     --expose=3000
      #     -p "3000:3000"
      #     node:20-alpine
      #     npx vite --host 0.0.0.0

      # - name: Test
      #   run: npm run test:e2e:headless

      # - name: Enviar email em caso de falha
      #   if: ${{ failure() }}
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: smtp.office365.com
      #     server_port: 587
      #     username: mckatoo@outlook.com
      #     password: ${{ secrets.SMTP_PASSWORD }}
      #     subject: Github Actions job result
      #     to: mckatoo@gmail.com
      #     from: iKatoo Repository
      #     html_body: Os testes E2E do repositório <a href="https://${{github.repository}}/tree/${{github.ref_name}}">${{github.repository}}</a> falharam. Por favor, verifique e corrija o código.
